generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

/// OUR MODELS

model Bot {
  id                   Int       @id @default(autoincrement())
  created_at           DateTime  @default(now()) @db.DateTime(0)
  updated_at           DateTime? @db.DateTime(0)
  deleted_at           DateTime? @db.DateTime(0)
  name                 String    @db.VarChar(255)
  client_api_key       String    @db.VarChar(255)
  organization_id      Int       @default(2)
  zendesk_kba_endpoint String?   @db.VarChar(255)
  zendesk_account_id   String?   @db.VarChar(255)
  zendesk_subdomain    String?   @db.VarChar(255)
  zendesk_api_key      String?   @db.VarChar(255)

  @@map("bot")
}

model BotSetting {
  id                    Int       @id @default(autoincrement())
  bot_id                Int
  business_start_hour   Int
  business_start_minute Int
  business_end_hour     Int
  business_end_minute   Int
  days_on               String    @default("1,2,3,4,5") @db.VarChar(255)
  time_zone             String    @default("America/New_York") @db.VarChar(255)
  visibility            String    @default("outside_business_hours") @db.VarChar(255) // outside_business_hours, always, never
  created_at            DateTime  @default(now()) @db.DateTime(0)
  updated_at            DateTime  @updatedAt @db.DateTime(0)
  deleted_at            DateTime? @db.DateTime(0)

  @@unique([bot_id])
  @@map("bot_setting")
}

model Conversation {
  id                 Int            @id @default(autoincrement())
  summary            String?        @db.VarChar(255)
  public_id          Int
  bot_id             Int
  user_id            Int
  created_at         DateTime       @default(now()) @db.DateTime(0)
  updated_at         DateTime?      @db.DateTime(0)
  deleted_at         DateTime?      @db.DateTime(0)
  ticket_deflected   Boolean?
  to_review          Boolean?
  zendesk_ticket_url String?        @db.VarChar(255)
  livemode           Boolean        @default(false)
  escalated          Boolean        @default(false)
  rating             Boolean?
  ended              Boolean        @default(false)
  ended_at           DateTime?      @db.DateTime(0)
  widgetSessionId    String?
  WidgetSession      WidgetSession? @relation(fields: [widgetSessionId], references: [sessionId])
  ChatTagging        ChatTagging?   @relation(fields: [tag_id], references: [id])
  tag_id             Int?

  @@unique([public_id, bot_id])
  @@index([bot_id], map: "bot_id_index")
  @@index([bot_id, user_id], map: "bot_id_user_id_index")
  @@index([widgetSessionId])
  @@map("conversation")
}

model KnowledgeBaseArticle {
  id                  BigInt    @id @default(autoincrement())
  created_at          DateTime  @default(now()) @db.DateTime(0)
  updated_at          DateTime? @db.DateTime(0)
  deleted_at          DateTime? @db.DateTime(0)
  title               String    @db.VarChar(255)
  content             String    @db.Text
  content_embedding   String    @db.Text
  total_token_count   Int
  bot_id              Int
  client_last_updated DateTime  @db.DateTime(0)
  client_article_id   String?   @db.VarChar(255)
  html_url            String    @db.VarChar(255)

  @@index([bot_id], map: "bot_id_index")
  @@index([client_article_id], map: "idx_knowledge_base_article_on_client_article_id")
  @@map("knowledge_base_article")
}

model Message {
  id                Int       @id @default(autoincrement())
  text              String    @db.VarChar(4096)
  index             Int
  conversation_id   Int
  from_user_id      Int
  to_user_id        Int
  bot_id            Int
  created_at        DateTime  @default(now()) @db.DateTime(0)
  updated_at        DateTime? @db.DateTime(0)
  deleted_at        DateTime? @db.DateTime(0)
  api_response_cost Float?    @db.Float
  sources           String?   @db.VarChar(2000)
  is_helpful        Boolean?
  finished          Boolean   @default(false)

  @@index([conversation_id], map: "idx_conversation_id")
  @@map("message")
}

model Organization {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now()) @db.DateTime(0)
  updated_at DateTime? @db.DateTime(0)
  deleted_at DateTime? @db.DateTime(0)
  name       String    @db.VarChar(255)

  @@map("organization")
}

model User {
  /// Note that the official prisma adapter for NextAuth uses a String id column
  /// but we're using Int since that's what we started with before NextAuth.
  id              Int       @id @default(autoincrement())
  name            String    @db.VarChar(255)
  email           String    @unique @db.VarChar(255)
  emailVerified   DateTime?
  image           String?
  organization_id Int
  created_at      DateTime  @default(now()) @db.DateTime(0)
  updated_at      DateTime? @db.DateTime(0)
  deleted_at      DateTime? @db.DateTime(0)
  accounts        Account[]
  sessions        Session[]

  @@index([organization_id], map: "account_id_index")
  @@map("user")
}

/// NEXTAUTH MODELS
/// Note that `User` above is used by both us and nextauth.

// Account is like the user's 3rd party account, ex. their google account.
model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}

model Note {
  id              Int       @id @default(autoincrement())
  content         String    @db.Text
  conversation_id Int
  user_id         Int
  created_at      DateTime  @default(now()) @db.DateTime(0)
  updated_at      DateTime? @db.DateTime(0)
  deleted_at      DateTime? @db.DateTime(0)

  @@index([conversation_id], map: "idx_conversation_id")
  @@map("note")
}

model Escalation {
  id                     Int       @id @default(autoincrement())
  conversation_id        Int       @unique
  public_conversation_id Int?
  bot_id                 Int
  reason                 String    @db.Text
  created_at             DateTime  @default(now()) @db.DateTime(0)
  updated_at             DateTime? @db.DateTime(0)
  deleted_at             DateTime? @db.DateTime(0)
  external_identifier    String?   @db.Text
  livemode               Boolean?

  @@index([conversation_id], map: "idx_conversation_id")
  @@map("escalation")
}

model AiInput {
  id             Int       @id @default(autoincrement())
  botId          Int
  conversationId Int
  messageId      Int
  log            Json
  createdAt      DateTime  @default(now()) @db.DateTime(0)
  updatedAt      DateTime? @db.DateTime(0)

  @@index([botId], name: "idx_ai_input_bot_id")
  @@index([conversationId], name: "idx_ai_input_conversation_id")
  @@map("ai_input")
}

model Activity {
  id        Int      @id @default(autoincrement())
  userId    Int?
  orgId     Int
  action    String
  details   Json?
  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @updatedAt @db.DateTime(0)

  @@index([orgId], name: "idx_activity_org_id")
  @@map("activity")
}

model WidgetSession {
  id           Int            @id @default(autoincrement())
  sessionId    String         @unique
  botId        Int
  isActive     Boolean        @default(true)
  startedAt    DateTime       @default(now()) @db.DateTime(0)
  details      Json?
  Conversation Conversation[]

  @@index([sessionId], name: "idx_widget_session_session_id")
  @@index([botId], name: "idx_widget_session_bot_id")
  @@map("widget_session")
}

model TicketTagging {
  id                 Int       @id @default(autoincrement())
  ticket_id          Int
  bot_id             Int
  tags               String
  zendesk_url        String
  ticket_description String
  ai_generated_tags  String?
  zendesk_tags       String?
  created_at         DateTime  @default(now()) @db.DateTime(0)
  updated_at         DateTime? @db.DateTime(0)
  input_tokens       Int
  output_tokens      Int
  other              Json?

  @@unique([bot_id, ticket_id])
  @@map("ticket_tagging")
}

model ChatTagging {
  id                Int            @id @default(autoincrement())
  bot_id            Int
  conversation_id   Int
  tags              String
  ai_generated_tags String?
  user_tags         String?
  created_at        DateTime       @default(now()) @db.DateTime(0)
  updated_at        DateTime?      @db.DateTime(0)
  cost              Float?
  other             Json?
  Conversation      Conversation[]

  @@unique([bot_id, conversation_id])
  @@index([conversation_id], name: "idx_chat_tagging_conversation_id")
  @@index([bot_id], name: "idx_chat_tagging_bot_id")
  @@map("chat_tagging")
}
